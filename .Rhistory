airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/6.Projeto-BigDataNaPratica-Segmentacao-de-Clientes-com-Base-em-Analise-RFM")
getwd()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/6.Trabalhando-com-Bancos-de-Dados-Relacionais-e-NoSQL-em-R")
getwd()
library(RSQLite)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/6.Trabalhando-com-Bancos-de-Dados-Relacionais-e-NoSQL-em-R")
getwd()
library(RSQLite)
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/6.Trabalhando-com-Bancos-de-Dados-Relacionais-e-NoSQL-em-R")
getwd()
library(RSQLite)
drv = dbDriver("SQLite")
View(drv)
con = dbConnect(drv, dbname = 'mamiferos.sqlite')
View(con)
library(dbplyr)
?src_dbi
?src_dbi()
src <- src_dbi(con)
View(src)
dbGetQuery(con, "SELECT sqlite_version() as version")
dbGetQuery(con, "SELECT sqlite_version() as version")
dbGetQuery(con, "SELECT sqlite_version() as version")
drv = dbDriver("SQLite")
con = dbConnect(drv, dbname = 'mamiferos.sqlite')
dbGetQuery(con, "SELECT sqlite_version() as version")
src_dbi(mamiferos)
src_dbi(con)
src_dbi(con)
mamiferos = dbConnect(drv, dbname = 'mamiferos.sqlite')
src_dbi(mamiferos)
versao_sqlite <- dbGetQuery(con, "SELECT sqlite_version() as version")
View(versao_sqlite)
query = "SELECT year, species_id, plot_id FROM surveys"
rs = dbSendQuery(mamiferos, query)
dados = fetch(rs, n = -1)
dados
View(dados)
dbListTables(mamiferos)
query2 = "SELECT * FROM surveys"
rs = dbSendQuery(mamiferos, query2)
dados = fetch(rs2, n = -1)
rs = dbSendQuery(mamiferos, query2)
dados = fetch(rs, n = -1)
View(dados)
query3 = "SELECT * FROM species"
rs = dbSendQuery(mamiferos, query3)
dados = fetch(rs, n = -1)
View(dados)
rs = dbSendQuery(mamiferos, query)
dados = fetch(rs, n = -1)
View(dados)
# Exercicio 6 - Já carregamos a tabela abaixo para você. Selecione as colunas species_id, sex e weight com a seguinte condição:
# Condição: weight < 5
pesquisas <- tbl(mamiferos, "surveys")
library(dplyr)
pesquisas <- tbl(mamiferos, "surveys")
View(pesquisas)
pesquisas <- as.data.frame(pesquisas)
View(pesquisas)
pesquisas <- tbl(mamiferos, "surveys")
View(pesquisas)
pesquisas <- as.data.frame(pesquisas)
View(pesquisas)
filtro <- pesquisas %>%
select(species_id, sex, weight) %>%
filter(weight < 5)
View(filtro)
pesquisas <- tbl(mamiferos, "surveys")
filtro <- pesquisas %>%
select(species_id, sex, weight) %>%
filter(weight < 5)
filtro
View(filtro)
pesquisas <- tbl(mamiferos, "surveys")
pesquisas <- as.data.frame(pesquisas)
filtro <- pesquisas %>%
select(species_id, sex, weight) %>%
filter(weight < 5)
View(filtro)
dbListTables(mamiferos)
dbWriteTable(mamiferos, 'tabela_nova', filtro, row.names = TRUE)
dbListTables(mamiferos)
dbReadTable(mamiferos, 'tabela_nova')
dbListTables(mamiferos)
dbRemoveTable(mamiferos, "tabela_nova")
dbListTables(mamiferos)
pesquisas <- tbl(mamiferos, "surveys")
pesquisas %>%
select(species_id, sex, weight) %>%
filter(weight < 5)
pesquisas_df <- pesquisas %>%
select(species_id, sex, weight) %>%
filter(weight < 5)
class(pesquisas_df)
pesquisa_df <- as.data.frame(pesquisas_df)
class(pesquisas_df)
pesquisas_df <- as.data.frame(pesquisas_df)
class(pesquisas_df)
View(pesquisas_df)
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/7.Manipulacao-de-Dados-com-R")
getwd()
install.packages("readr")
install.packages("dplyr")
library(readr)
library(dplyr)
install.packages("dplyr")
library(readr)
library(dplyr)
sono_df <- read_csv("sono.csv")
View(sono_df)
head(sono_df)
class(sono_df)
str(sono_df)
glimpse(sono_df)
glimpse(mutate(sono_df, peso_libras = sono_total / 0.45359237))
View(sono_df)
bla <- mutate(sono_df, peso_libras = sono_total / 0.45359237)
View(bla)
count(sono_df, cidade)
count(sono_df, nome)
count(sono_df, pais)
hist(sono_df$pais)
hist(sono_df$sono_total)
View(sono_df)
hist(sono_df$peso)
sample_n(sono_df, size = 10)
sample_n(sono_df, size = 10)
sleep_nome_sonototal <- select(sono_df, nome, sono_total)
View(sleep_nome_sonototal)
select(sono_df, nome)
View(select(sono_df, nome))
View(select(sono_df, nome:cidade))
View(select(sono_df, nome:sono_total)) # retorna todas as colunas de nome até sono_total
View(filter(sono_df, sono_total >= 16))
View(filter(sono_df, sono_total >= 16, peso >= 80))
View(filter(sono_df, cidade %in% c('Recife', 'Curitiba')))
View(filter(sono_df, pais = 'Brasil'))
View(filter(sono_df, pais == 'Brasil'))
sono_df_arrange <- arrange(cidade) %>% head
sono_df_arrange <- sono_df %>%  arrange(cidade) %>% head
View(sono_df_arrange)
sono_df_arrange <- sono_df %>%  arrange(cidade)
sono_df_arrange2 <- sono_df %>%
sono_df_arrange2 <-
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total)
sono_df_arrange2 <-
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total)
sono_df_arrange2 <-
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total)
View(sono_df_arrange2)
sono_df_arrange3 <-
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
filter(sono_total >= 10)
View(sono_df_arrange3)
head(sono_df)
sono_df_mutate <-
sono_df %>%
mutate(novo_indice = sono_total / peso)
View(sono_df_mutate)
View(sono_df_mutate)
sono_df_arrange4 <-
sono_df %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, desc(sono_total)) %>%
filter(sono_total >= 10)
View(sono_df_arrange4)
View(sono_df_arrange3)
sono_df_mutate2 <-
sono_df %>%
mutate(novo_indice = sono_total / peso,      # adicionada coluna novo_indice
peso_libras = peso / 0.45359237)
View(sono_df_mutate2)
sono_df_summarize <-
sono_df %>%
summarise(media_sono = mean(sono_total))
sono_df_summarize <-
sono_df %>%
summarise(media_sono = mean(sono_total))
View(sono_df_summarize)
sono_df_summarize2 <-
sono_df %>%
group_by(cidade) %>%
summarise(media_sono = mean(sono_total))     # retorna a média da coluna sono_total
View(sono_df_summarize2)
sono_df_summarize2 <-
sono_df %>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
View(sono_df_summarize2)
View(sono_df_summarize)
View(sono_df_summarize2)
sono_df_summarize2 <-
sono_df %>%
summarise(media_sono_total = mean(sono_total),
min_sono_total = min(sono_total),        # valor mínimo
max_sono_total = max(sono_total),        # valor máximo
total = n())                       # numero total de observações
View(sono_df_summarize2)
sono_df_group_by <-
sono_df %>%
group_by(cidade) %>%                         # agrupando  por cidade
summarise(media_sono = mean(sono_total))     # retorna a média da coluna sono_total de cada cidade
sono_df_group_by <-
sono_df %>%
group_by(cidade) %>%                               # agrupando  por cidade
summarise(media_sono_total = mean(sono_total))     # retorna a média da coluna sono_total de cada cidade
sono_df_group_by2 <-
sono_df %>%
group_by(cidade) %>%                               # agrupando  por cidade
summarise(media_sono_total = mean(sono_total),
min_sono_total = min(sono_total),
max_sono_total = max(sono_total))
View(sono_df_group_by)
View(sono_df_group_by2)
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/7.Manipulacao-de-Dados-com-R")
getwd()
install.packages("hflights")
library(hflights)
library(dplyr)
?hflights
dados_flights <- tbl_df(hflights)
View(dados_flights)
str(dados_flights)
str(hflights)
glimpse(dados_flights)
View(data.frame(head(dados_flights)))
dados_flights[dados_flights$Month == 1 & dados_flights$DayofMonth == 1, ]
View(dados_flights[dados_flights$Month == 1 & dados_flights$DayofMonth == 1, ])
View(filter(dados_flights, Month == 1, DayofMonth == 10))
View(dados_flights[dados_flights$Month == 1 & dados_flights$DayofMonth == 1, ])
View( filter(dados_flights, Month == 1, DayofMonth == 10) )
View( filter(dados_flights, UniqueCarrier == "AA" | UniqueCarrier == "UA") )
View( filter(dados_flights, UniqueCarrier %in% c("AA", "UA")) )
View( select(dados_flights, Year:DayofMonth) )
View(dados_flights)
View( select(dados_flights, Year:DayofMonth, contains("Taxi"), contains("Delay")) )     # seleciona todas as colunas de Year até DayofMonth
flights <-
dados_flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
View(flights)
flights2 <-
dados_flights %>%
select(Distance, AirTime) %>%               # selecionando colunas
mutate(Speed = Distance / AirTime * 60)     # adicionando nova coluna Speed
View(flights2)
View( with(flights2, tapply(ArrDelay, Dest, mean, na.rm = TRUE)) )
View( with(dados_flights, tapply(ArrDelay, Dest, mean, na.rm = TRUE)) )
View( head(with(dados_flights, tapply(ArrDelay, Dest, mean, na.rm = TRUE))) )
head(aggregate(ArrDelay ~ Dest, dados_flights, mean))
flights3 <-
dados_flights %>%
group_by(Month, DayofMonth)
View(flights3)
tally(sort = TRUE)
flights3 <-
dados_flights %>%
group_by(Month, DayofMonth) %>%
tally()
View(flights3)
flights3 <-
dados_flights %>%
group_by(Month, DayofMonth) %>%
tally(sort = TRUE)
View(flights3)
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/7.Manipulacao-de-Dados-com-R")
getwd()
install.packages("tidyr")
library(tidyr)
library(ggplot2)
dados <- data.frame(
Nome = c("Geografia", "Literatura", "Biologia"),
Regiao_A = c(97, 80, 84),
Regiao_B = c(86, 90, 91)
)
View(dados)
dados_gather <-
dados %>%
gather(Regiao, NotaFinal, Regiao_A:Regiao_B)
View(dados_gather)
set.seed(10)
dados2 <- data.frame(
id = 1:4,
acao = sample(rep(c('controle', 'tratamento'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
View(dados2)
View(dados2)
dados2_organizado1 <-
dados2 %>%
gather(key, time, -id, -acao)
View(dados2_organizado1)
dados2_organizado2 <-
dados2_organizado1 %>%
separate(key, into = c("localidade", "tempo"), sep = "\\.")
View(dados2_organizado2)
View(dados)
View(dados)
View(dados_gather)
View(dados_gather)
View(dados2)
View(dados2_organizado1)
View(dados2_organizado2)
dados3 <- data.frame(
participante = c('p1', 'p2', 'p3', 'p4', 'p5', 'p6'),
info = c('g1m', 'g1m', 'g1f', 'g2m', 'g2m', 'g2m'),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8)
)
View(dados3)
ex <-
dados2 %>%
gather(key, time)
View(ex)
ex <-
dados2 %>%
gather(key)
View(ex)
ex <-
dados2 %>%
gather(key, time, -id)
View(ex)
View(dados2_organizado2)
dados3_organizado1 <-
dados3 %>%
gather(day, score, c(day1score, day2score))
View(dados3_organizado1)
View(dados_gather)
dados3_organizado2 <-
dados3 %>%
gather(day, score, -participante, -info)
View(dados3_organizado2)
dados3_organizado3 <-
dados3 %>%
gather(day, score, day1score:day2score)
View(dados3_organizado3)
dados3_organizado_spread <-
dados3 %>%
gather(day, score, c(day1score, day2score)) %>%
spread(day, score)
View(dados3_organizado3)
View(dados3_organizado_spread)
set.seed(1)
dados3 <- data.frame(
participante = c('p1', 'p2', 'p3', 'p4', 'p5', 'p6'),
info = c('g1m', 'g1m', 'g1f', 'g2m', 'g2m', 'g2m'),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8)
)
View(dados3)
# Reshape 1 (3 funçõs gather que realiza a mesma tarefa)
dados3_organizado1 <-
dados3 %>%
gather(day, score, c(day1score, day2score))     # criando colunas 'day' e 'score' a partir de 'day1score' e 'day2score'
dados3_organizado2 <-
dados3 %>%
gather(day, score, -participante, -info)
dados3_organizado3 <-
dados3 %>%
gather(day, score, day1score:day2score)
dados3_organizado_spread <-        # funcao spread retorna o dataframe ao formato original (é o oposto do gather)
dados3 %>%
gather(day, score, c(day1score, day2score)) %>%
spread(day, score)
dados3_organizado4 <-
dados3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c('group', 'gender'), sep = 2)
View(dados3_organizado4)
dados3_organizado5 <-
dados3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c('group', 'gender'), sep = 2) %>%
unite(infoAgain, group, gender)
View(dados3_organizado5)
dados3_organizado_grafico <-
dados3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c('group', 'gender'), sep = 2)
dados3_organizado_grafico <-
ggplot(aes(x = day, y = score)) +
geom_point() +
facet_wrap(~ group) +
geom_smooth(method = 'lm', aes(group = 1), se = F)
dados3_organizado_grafico <-
dados3 %>%
gather(day, score, c(day1score, day2score)) %>%
separate(col = info, into = c('group', 'gender'), sep = 2)
dados3_organizado_grafico %>%
ggplot(aes(x = day, y = score)) +
geom_point() +
facet_wrap(~ group) +
geom_smooth(method = 'lm', aes(group = 1), se = F)
library(tidyr)
gc()
dados1 <- data.frame(
id = 1:4,
acao = sample(rep(c('controle', 'tratamento'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
View(dados1)
View(dados1)
set.seed(123)
vendas <- data.frame(
loja = rep(LETTERS[1:4], each = 3),
produto = rep(c("produto A", "produto B", "produto C"), 4),
venda1 = round(runif(12, min = 10, max = 50)),
venda2 = round(runif(12, min = 10, max = 50))
)
View(dados1)
View(vendas)
dados3 <- data.frame(
participante = c('p1', 'p2', 'p3', 'p4', 'p5', 'p6'),
info = c('g1m', 'g1m', 'g1f', 'g2m', 'g2m', 'g2m'),
day1score = rnorm(n = 6, mean = 80, sd = 15),
day2score = rnorm(n = 6, mean = 88, sd = 8)
)
dados3_organizado1 <-
dados3 %>%
gather(day, score, c(day1score, day2score))     # criando colunas 'day' e 'score' a partir de 'day1score' e 'day2score'
View(dados3_organizado1)
View(dados3)
vendas_res <-
vendas %>%
gather(tipo_de_venda, valor_da_venda, c('venda1', 'venda2'))
View(vendas_res)
View(vendas_res)
library(dplyr)
vendas_res2 <-
vendas_res %>%
group_by(loja, produto) %>%
summarise(media_produto = mean(valor_da_venda))
View(vendas_res2)
View(vendas_res2)
View(vendas_res)
View(vendas_res2)
set.seed(456)
desempenho <- data.frame(
aluno = paste0("aluno", 1:8),
matematica1 = round(runif(8, min = 0, max = 10), 1),
matematica2 = round(runif(8, min = 0, max = 10), 1),
portugues1 = round(runif(8, min = 0, max = 10), 1),
portugues2 = round(runif(8, min = 0, max = 10), 1),
historia1 = round(runif(8, min = 0, max = 10), 1),
historia2 = round(runif(8, min = 0, max = 10), 1)
)
View(desempenho)
