# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostrairis
amostra_iris
dim(amostra_iris)
# Gerando a amostra
amostra_iris = iris[amostra==1,]
amostra_iris
dim(amostra_iris)
# Repetir o experimento (vem os mesmos valores acima)
set.seed(2345)
sample(c(1000), 1)
set.seed(2345)
set.seed(2345)
sample(c(1000), 1)
# Repetindo
set.seed(2345)
sample(c(1000), 1)
install.packages("TeachingSampling")
# install.packages("TeachingSampling")
library("TeachingSampling")
install.packages("Rtools")
amostra = S.SY(150, 10)
amostra
dim(amostra)
amostra
amostra
# gerando amostra sistematica até 150 em 10 grupos
amostra = S.SY(150, 10)
amostra
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris = iris[amostra,]
amostra_iris
dim(amostra_iris)
install.packages("sampling")
library("sampling")
proporcao = 25
amostra_iris = strata(data=iris, stratanames=c('Species'), size=c(rep(proporcao, 3)), method='srswor')
# Exibindo resultado através de um sumario
summary(amostra_iris)
infert
summary(infert)
# outro exemplo usando conjunto de dados infert (características de infertilidade)
infert
summary(infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
# resultado
amostra_infert
summary(amostra_infert)
amostra_infert
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor)
amostra_infert = strata(data = infert, stratanames = c("education"), size = c(5,48,47), method = 'srswor')
# resultado
amostra_infert
summary(amostra_infert)
# Dados dos jogadores
jogadores = c(40000, 18000, 12000, 250000, 30000, 140000, 300000, 40000, 800000)
jogadores
mean(jogadores)
median(jogadores)
# Quartis
quartis = quantile(jogadores)
quartis
quartis[4]
sd(jogadores)
summary(jogadores)
options(warn=-1)
install.packages("semTools")
library(semTools)
z = rep(0, 500)
# Gera as amostras
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma", i))
}
}
m
# m Gera as amostras/dados enviesados(por isso o skewness, kurtosis)
for (i in 1:500) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/7.Manipulacao-de-Dados-com-R")
getwd()
# Carregando pacotes
library(reshape2)
library(lattice)  # gerar gráficos
library(ggplot2)  # gerar gráficos
library(dplyr)
library(tidyr)
library(stringr)  # necessario para usar a funcao mutate()
library(lubridate) # necessario para funcao de data
library(ggplot2)
pacientes <- data.frame(
id = 1:500,
sexo = sample(c("Feminino", "Masculino"), size = 500, replace = TRUE),
idade = sample(18:80, size = 500, replace = TRUE),
peso = rnorm(500, mean = 70, sd = 10),
altura = rnorm(500, mean = 170, sd = 10),
diabetes = sample(c(TRUE, FALSE), size = 500, replace = TRUE, prob = c(0.1, 0.9)),
pressao = sample(c("Normal", "Alta"), size = 500, replace = TRUE, prob = c(0.7, 0.3)),
doenca_cardiaca = sample(c(TRUE, FALSE), size = 500, replace = TRUE, prob = c(0.2, 0.8))
)
View(pacientes)
pacientes_modif <- melt(pacientes, id.vars = c("id", "sexo", "idade", "peso", "altura"))
View(pacientes_modif)
# utilizando gather()
pacientes_modif2 <- gather(pacientes, key = "variavel", value = "valor", -id, -sexo, -idade, -peso, -altura)
View(pacientes_modif2)
set.seed(123)
df2 <- data.frame(
vendedor = sample(c("João", "Maria", "Pedro"), 500, replace = TRUE),
produto = sample(c("Camiseta", "Calça", "Bermuda"), 500, replace = TRUE),
venda_jan = round(rnorm(500, 50, 10), 2),
venda_fev = round(rnorm(500, 60, 15), 2),
venda_mar = round(rnorm(500, 70, 12), 2)
)
View(df2)
View(df2)
df2_modif <- melt(df2, id.vars = c("vendedor","produto"))
View(df2_modif)
vendas <- data.frame(
loja = rep(LETTERS[1:4], each = 3),
produto = rep(c("produto A", "produto B", "produto C"), 4),
venda1 = round(runif(12, min = 10, max = 50)),
venda2 = round(runif(12, min = 10, max = 50))
)
View(vendas)
df2_modif2 <-
df2 %>%
gather(mes_da_venda, valor, -vendedor, -produto)
View(df2_modif2)
df <- data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34, NA),
peso = c(93, NA),
altura = c(175, 178))
df
df_long <- melt(df, id = c('nome', 'chuteira'))
df_long
# Removendo NA utilizando a mesma função melt()
df_long <- melt(df, id = c('nome', 'chuteira'), na.rm = TRUE)
df_long
dcast(df_long, formula = nome + chuteira ~ variable)
df2_modif3 <- dcast(df2_modif, formula = vendedor + produto ~ variable)
View(df2_modif3)
View(df)
set.seed(123)
df2 <- data.frame(
vendedor = sample(c("João", "Maria", "Pedro"), 500, replace = TRUE),
produto = sample(c("Camiseta", "Calça", "Bermuda"), 500, replace = TRUE),
venda_jan = round(rnorm(500, 50, 10), 2),
venda_fev = round(rnorm(500, 60, 15), 2),
venda_mar = round(rnorm(500, 70, 12), 2)
)
View(df2)
df2_modif <- melt(df2, id.vars = c("vendedor","produto"))
View(df2_modif)
# utilizando gather()
df2_modif2 <-
df2 %>%
gather(mes_da_venda, valor, -vendedor, -produto)
View(df2_modif2)
df2_modif3 <- dcast(df2_modif, formula = vendedor + produto ~ variable)
View(df2_modif3)
View(df2_modif)
df2_modif3 <- dcast(df2_modif, formula = vendedor + produto ~ variable, value.var = "value")
View(df2_modif3)
df2_modif3 <- dcast(df2_modif, formula = vendedor + produto ~ variable, value.var = "value", fun.aggregate = sum)
View(df2_modif3)
df2_modif_wide <- dcast(df2_modif, vendedor + produto ~ variable, value.var = "value")
set.seed(123)
df3 <- data.frame(
cidade = rep(c("Cidade A", "Cidade B", "Cidade C", "Cidade D", "Cidade E"), 3),
ano = rep(c(2019, 2020, 2021), each = 5),
populacao = round(runif(15, 10000, 50000))
)
View(df3)
df3_modif_a <- melt(df3, id.vars = c('cidade'))
View(df3_modif_a)
df3_modif_b <- dcast(df3_modif_a, formula = ano + populacao ~ variable, value.var = 'value')
df3_modif_b <- dcast(df3_modif_a, formula = cidade + populacao ~ variable, value.var = 'value')
df3_modif_b <- dcast(df3_modif_a, formula = cidade ~ variable, value.var = 'value')
View(df3_modif_b)
df2 <- data.frame(
vendedor = sample(c("João", "Maria", "Pedro"), 500, replace = TRUE),
produto = sample(c("Camiseta", "Calça", "Bermuda"), 500, replace = TRUE),
venda_jan = round(rnorm(500, 50, 10), 2),
venda_fev = round(rnorm(500, 60, 15), 2),
venda_mar = round(rnorm(500, 70, 12), 2)
)
View(df2)
# a) Utilize a função melt para transformar o dataframe df de formato "wide" para "long". Utilize as colunas vendedor e
#    produto como identificadores.
df2_modif <- melt(df2, id.vars = c("vendedor","produto"))
View(df2_modif)
# utilizando gather()
df2_modif2 <-
df2 %>%
gather(mes_da_venda, valor, -vendedor, -produto)
View(df2_modif2)
df3_modif_b <- dcast(df3_modif_a, formula = cidade + variable ~ value)
View(df3_modif_b)
df3_modif_b <- dcast(df3_modif_a, formula = cidade ~ variable)
df3_modif_b <- dcast(df3_modif_a, formula = cidade ~ variable, value.var = "value")
View(df3_modif_b)
View(df3_modif_a)
df3_modif_b <- dcast(df3_modif_a, cidade ~ ano, value.var = "value")
View(df3)
df3_modif_a <- melt(df3, id.vars = c('cidade', 'ano'))
View(df3_modif_a)
df3_modif_b <- dcast(df3_modif_a, cidade ~ ano, value.var = "value")
View(df3_modif_b)
df3_modif_b <- dcast(df3_modif_a, cidade + ano ~ variable, value.var = "value")
View(df3_modif_b)
View(df3)
set.seed(123)
df4 <- data.frame(
aluno = rep(paste0("Aluno", 1:100), 3),
disciplina = rep(c("Matemática", "Português", "História"), each = 100),
nota = round(runif(300, 0, 10), 2)
)
View(df4)
df4_modif <- melt(df4, id.vars = c('aluno', 'disciplina'))
View(df4_modif)
gc()
install.packages("plyr")
install.packages("gapminder")
library(plyr)
library(gapminder)
