m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
# m
# grava a média da amostra
z[i] = mean(m)
#imprime as 3 primeiras
if (i < 4) {
hist(m, breaks=50, main=paste0("Histrograma ", i))
}
}
hist(z)
set.seed(123)
x = rnorm(1000)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
#linha
qqline(x)
#linha
qqline(x)
qqnorm(x)
# Gráfico QQ (rodar com ctrl shif enter)
qqnorm(x)
#linha
qqline(x)
shapiro.test(x)
hist(x, main="")
hist(x)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TrUE)
# Histograma com linha de densidade (rodar com ctrl shif enter)
hist(x, main='')
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
# Exemplo com Dados não normalmente distribuidos
install.packages("semTools")
library(semTools)
install.packages("semTools")
library(semTools)
# Exemplo com Dados não normalmente distribuidos
# install.packages("semTools")
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness=c(5, 2), kurtosis= c(3,3))
qqnorm(m)
qqline(m)
shapiro.test(m)
shapiro.test(m)
hist(m, main="")
# Histograma (rodar com ctrl shif enter)
hist(m, main="")
par(new=TRUE)
plot(density(x), ylab="", xlab="", axes=F, lwd=2.5)
mean(x)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra Pequena
# Espera-se uma média de 3,5
# Gerando a média
x = sample(1:6, 6, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
# Amostra grande
x = sample(1:6, 10000, replace = T)
mean(x)
plot(cars)
plot(cars)
getwd()
# Multiplicação
5 * 5
6 / 2
# Potência
3^2
3**2
# Módulo
16 %% 3
x = 7
y = 5
# Operadores
x > 8
x < 8
x <= 8
x >= 8
x == 8
x != 8
# And
(x==8) & (x==6)
(x==7) & (x==5)
(x==8) & (x==5)
# Or
(x==8) | (x>5)
(x==8) & (x>=5)
# Not
x > 8
print(!x > 8)
getwd()
var1
var1 = 100
var1
var1
var1
var1
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
# criando variáveis
vari
# criando variáveis
var1
# criando variáveis
var1
mode(var1)
var1 = 100
var1
mode(var1)
help("mode")
sqrt(var1)
help("sqrt")
var1 = var2
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var2 = var1
var2
mode(var2)
typeof(var2)
help("typeof")
var3 = c("primeiro", "segundo", "terceiro")
var3
mode(var3)
var4 = function(x) {x+3}
var4
mode(var4)
var5 = as.character(var1)
var5
mode(var5)
x <- c(1,2,3)
x
x1 = c(1,2,3)
x1
c(1,2,3) -> y
y
assign("z", c(6.3,4,-2)) # função para atribuir, atribuimos o veotr para "z"
z
# verificando o valor em uma posição específica
x[1]
x[1]
# verificar objetos
ls()
# verificando o valor em uma posição específica
z[1]
# verificar objetos
ls()
objects()
ls()
objects()
# remover objetos (variaveis)
rm(x)
x
nomes <- character()
idades <- numeric()
itens <- numeric()
codigos <- integer()
x <- 5:7
y <- 8:10
x
plot(x, y)
?plot
?plot
help(plot)
altura <- c(145, 167, 176, 123, 150)
largura <- c(51, 63, 64, 40, 55)
plot(altura, largura)
?lynx
?lynx
View(lynx)
lynx
data(lynx)
View(lynx)
plot(lynx)
head(lynx)
View(head(lynx))
View(iris)
?lynx
head(lynx)
plot(lynx)
str(lynx)
names(lynx)
colnames(lynx)
plot(iris)
plot(lynx)
View(lynx)
?lynx # dataframe "lynx" contém duas colunas: "Year" (ano) e "trappings" (armadilhas), com 114 observações para cada variável
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx)
plot(lynx, ylab = 'Plots com Dataframes', xlab = '')
plot(lynx, ylab = 'Plots com Dataframes', xlab = 'Observações')
plot(lynx, main = 'Plots com Dataframes')
plot(lynx, main = 'Plots com Dataframes', col = 'red')
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 62,  cex.main = 1.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 2.5)
plot(lynx, main = 'Plots com Dataframes', col = 'red', col.main = 52,  cex.main = 1.5) # muda a cor e o tamanho do titulo
library(datasets)
hist(warpbreaks$breaks)
View(airquality)
View(airquality)
transform(airquality, Month = factor(Month))
View(airquality)
View(transform(airquality, Month = factor(Month)))
transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = 'Month', ylab = 'Ozone (ppb)')
airquality
transform(airquality, Month = factor(Month))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# caso queira fazer ajustes em dos parametros, temos a funcao par()
?par
gc()
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/7.Manipulacao-de-Dados-com-R")
getwd()
# Carregando os pacotes
library(dplyr)
library(tidyr)
library(stringr)  # necessario para usar a funcao mutate()
library(lubridate) # necessario para funcao de data
library(ggplot2)
# Pivot (transposta da Matriz)
mtcars
t(mtcars)
View(mtcars)
View(t(mtcars))
head(iris)
str(iris)
library(lattice)
iris_modif <- reshape(iris,
varying = 1:4,
v.names = "Medidas",
timevar = "Dimensoes",
times = names(iris)[1:4],
idvar = "ID",
direction = "long")
head(iris_modif)
View(iris)
View(iris_modif)
str(iris)
str(iris_modif)
iris_modif <- reshape(iris,
varying = 1:4,
v.names = "Medidas",
timevar = "Dimensoes",
times = names(iris)[1:4],
idvar = "IkkD",
direction = "long")
View(iris_modif)
iris_modif <- reshape(iris,
varying = 1:4,
v.names = "Medidas",
timevar = "Dimensoes",
times = names(iris)[1:4],
idvar = "ID",
direction = "long")
View(iris_modif)
bwplot(Medidas ~ Species | Dimensoes, data = iris_modif)
library(ggplot2)
ggplot(iris_modif, aes(x = Species, y = Medidas, fill = Species)) +
geom_boxplot()
ggplot(iris_modif, aes(x = Species, y = Medidas, fill = Species)) +
geom_boxplot() +
facet_wrap(~Dimensoes, scales = "free_y") +
theme_minimal()
iris_modif2 <- reshape(iris,
varying = list(c(1, 3), c(2, 4)),
v.names = c('Comprimento', 'Largura'),
timevar = 'Parte',
times = c('Sepal', 'Petal'),
idvar = 'ID',
direction = 'long')
str(iris_modif2)
View(iris_modif2)
xyplot(Comprimento ~ Largura | Species, data = iris_modif2,
groups = Parte, auto.key = list(space = "right"))
xyplot(Comprimento ~ Largura | Species, data = iris_modif2,
groups = Species, auto.key = list(space = "right"))
ggplot(iris_modif2, aes(x = Largura, y = Comprimento, color = Parte)) +   # ggplot
geom_point() +
facet_wrap(~ Species) +
theme(legend.position = "right")
iris_modif2 <- reshape(iris,
varying = list(c(1, 3), c(2, 4)),
v.names = c('Comprimento', 'Largura'),
timevar = 'Parte',
times = c('Sepale', 'Petala'),
idvar = 'ID',
direction = 'long')
View(iris_modif2)
View(iris_modif)
View(iris)
View(iris_modif)
View(iris)
View(iris_modif2)
iris_modif2 <- reshape(iris,
varying = list(c(1, 3), c(2, 4)),
v.names = c('Comprimento', 'Largura'),
timevar = 'Parte',
times = c('Sepal', 'Petal'),
idvar = 'ID',
direction = 'long')
View(iris_modif2)
install.packages("reshape2")
library(reshape2)
df <- data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34, NA),
peso = c(93, NA),
altura = c(175, 178))
df
View(df)
df_wide <- melt(df, id = c('nome', 'chuteira'))
df
df_wide
df <- data.frame(nome = c("Zico", "Pele"),
chuteira = c(40, 42),
idade = c(34, NA),
peso = c(93, NA),
altura = c(175, 178))
df
# "Derretendo" o dataframe com a Função melt()
df_long <- melt(df, id = c('nome', 'chuteira'))
df_long
df_long <- melt(df, id = c('nome', 'chuteira'), na.rm = TRUE)
df_long
dcast(df_long, formula = chuteira + nome ~ variable)
dcast(df_long, formula = nome + chuteira ~ variable)
dcast(df_long, formula = nome ~ variable)
dcast(df_long, formula = ... ~ variable)
airquality
names(airquality) <- tolower(names(airquality))
airquality
dim(airquality)
df_airquality <- melt(airquality)
dim(airquality)
View(airquality)
dim(df_airquality)
View(df_airquality)
tail(df_airquality)
df_airquality2 <- melt(airquality, id.vars = c('month', 'day'))
dim(df_airquality)
View(df_airquality)
dim(df_airquality2)
View(df_airquality2)
df_airquality2 <- melt(airquality, id = c('month', 'day'))
dim(df_airquality2)
View(df_airquality2)
df_airquality2 <- melt(airquality, id.vars = c('month', 'day'),
variable.name = "climate_variable", value.name = "climate_value")
View(df_airquality2)
df_airquality_wide <- dcast(df_airquality2, id.vars = c('month', 'day'))
df_airquality_wide <- dcast(df_airquality, id.vars = c('month', 'day'))
df_long <- melt(airquality, id.vars = c('month', 'day'))
df_airquality_wide <- dcast(df_airquality2, month + day ~ variable)
df_airquality_wide <- dcast(df_airquality, month + day ~ variable)
df_long <- melt(airquality, id.vars = c('month', 'day'))
df_airquality_wide <- dcast(df_long, month + day ~ variable)
View(df_long)
View(df_airquality_wide)
library(reshape2)
library(lattice)  # gerar gráficos
library(ggplot2)  # gerar gráficos
set.seed(123)
gc()
vendas <- data.frame(
mes = rep(1:12, times = 50),
produto = sample(letters[1:5], size = 600, replace = TRUE),
vendedor = sample(paste0('vendedor', 1:10), size = 600, replace = TRUE),
venda = runif(600, 1000, 10000)
)
View(vendas)
vendas_a <- reshape2(vendas, id = c('mes', 'vendedor', 'venda'))
library(reshape2)
vendas_a <- reshape2(vendas, id = c('mes', 'vendedor', 'venda'))
vendas_a <- melt(vendas, id = c('mes', 'vendedor', 'venda'))
View(vendas_a)
set.seed(123)
pacientes <- data.frame(
id = 1:500,
sexo = sample(c("Feminino", "Masculino"), size = 500, replace = TRUE),
idade = sample(18:80, size = 500, replace = TRUE),
peso = rnorm(500, mean = 70, sd = 10),
altura = rnorm(500, mean = 170, sd = 10),
diabetes = sample(c(TRUE, FALSE), size = 500, replace = TRUE, prob = c(0.1, 0.9)),
pressao = sample(c("Normal", "Alta"), size = 500, replace = TRUE, prob = c(0.7, 0.3)),
doenca_cardiaca = sample(c(TRUE, FALSE), size = 500, replace = TRUE, prob = c(0.2, 0.8))
)
View(pacientes)
pacientes_melt <- melt(pacientes, id = c('pacientes'))
pacientes_melt <- melt(pacientes, id.vars = c('pacientes'))
pacientes_melt <- melt(pacientes, id.vars = c('id'))
View(pacientes_melt)
pacientes_modif <- melt(pacientes, id.vars = c("id", "sexo", "idade", "peso", "altura"))
pacientes_modif <- melt(pacientes, id.vars = c("id", "sexo", "idade", "peso", "altura"))
View(pacientes_modif)
pacientes_modif2 <- gather(pacientes, key = "variavel", value = "valor", -id, -sexo, -idade, -peso, -altura)
View(pacientes_modif2)
loja <- data.frame(
produto = c("produto1", "produto2", "produto3", "produto4"),
vendas_semana_1 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_2 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_3 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_4 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_5 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_6 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_7 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_8 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_9 = round(runif(4, min = 0, max = 100), 2),
vendas_semana_10 = round(runif(4, min = 0, max = 100), 2)
)
View(loja)
loja_res <-
loja %>%
gather(semana, valor_vendas, -produto)
View(loja_res)
ggplot(pacientes_modif, aes(x = variable, fill = value)) +
geom_bar() +
facet_grid(~ sexo) +
labs(title = "Número de Pacientes com Doença Cardíaca ou Diabetes",
x = "",
y = "Número de Pacientes",
fill = "") +
scale
ggplot(pacientes_modif, aes(x = variable, fill = value)) +
geom_bar() +
facet_grid(~ sexo) +
labs(title = "Número de Pacientes com Doença Cardíaca ou Diabetes",
x = "",
y = "Número de Pacientes",
fill = "")
View(pacientes)
ggplot(pacientes, aes(x = diabetes, fill = sexo)) +
geom_bar() +
facet_grid(~ sexo) +
labs(title = "Número de Pacientes com DDiabetes",
x = "",
y = "Número de Pacientes",
fill = "")
View(df4)
ggplot(pacientes, aes(x = factor(doenca_cardiaca | diabetes), fill = sexo)) +
geom_bar() +
scale_x_discrete(labels = c("Sem Doença", "Com Doença")) +
facet_grid(~ sexo) +
labs(title = "Número de Pacientes com Doença Cardíaca ou Diabetes",
x = "",
y = "Número de Pacientes",
fill = "") +
scale_fill_manual(values = c("#E69F00", "#56B4E9"))
